#pragma execution_character_set("utf-8")
#include "Hypersen_31_Remote.h"
/*************************************************************************************************************************************************
**Function:    构造函数
**Others:      构造函数初始化在主线程实例化中完成，故在子线程中运行时，成员函数的初始化不能在构造函数中完成
*************************************************************************************************************************************************/
c_Hypersen_31_Remote::c_Hypersen_31_Remote(c_Hypersen_Remote *parent) : c_Hypersen_Remote(parent)
{

}
/*************************************************************************************************************************************************
**Function:    析构函数
*************************************************************************************************************************************************/
c_Hypersen_31_Remote::~c_Hypersen_31_Remote()
{
}
/*************************************************************************************************************************************************
**Function:    初始化函数
*************************************************************************************************************************************************/
void c_Hypersen_31_Remote::Init()
{
	//循环连接
	c_Hypersen_Remote::Init();
	QObject::connect(m_Hypersen_Remote, &c_Hypersen_Client::Connect_Loop, this, &c_Hypersen_31_Remote::Connect_Loop);
	QObject::connect(this, &c_Hypersen_31_Remote::Read_Ready, c_Hypersen_CallBack::g_Hypersen_CallBack, &c_Hypersen_CallBack::Hypersen_31_Read_Ready);
}
/*************************************************************************************************************************************************
**Function:    操作接口
*************************************************************************************************************************************************/
void c_Hypersen_31_Remote::Connect()
{
	if (m_Hypersen_Remote_State.value("Connected").toBool()) { return; }
	QString ip = c_Variable::g_Communicate_DB.value("Hypersen_31_Ip").toString();
	int port = c_Variable::g_Communicate_DB.value("Hypersen_31_Port").toInt();
	c_Variable::msleep(1000);
	emit Connect_Device(ip, port);
}
/*************************************************************************************************************************************************
**Function:    循环连接
*************************************************************************************************************************************************/
void c_Hypersen_31_Remote::Connect_Loop()
{
	c_Variable::msleep(5000);//等待5s
	c_Hypersen_31_Remote::Connect();
}
/*************************************************************************************************************************************************
**Function:   同步接口
*************************************************************************************************************************************************/
void c_Hypersen_31_Remote::Hypersen_31_Read_Ready()
{
	emit Read_Ready(m_device_id);
}
